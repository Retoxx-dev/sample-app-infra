# TODO: affinity
# global:
#   affinity:
#     nodeAffinity:
#       requiredDuringSchedulingIgnoredDuringExecution:
#         nodeSelectorTerms:
#         - matchExpressions:
#           - key: <key>
#             operator: In
#             values:
#               - <value>

## Argo CD Server
server:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/tls-acme: true
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/ssl-redirect: true
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      cert-manager.io/cluster-issuer: letsencrypt
      cert-manager.io/acme-challenge-type: http01
    hosts:
      - argocd.dziedzic.me
    tls:
      - secretName: argocd-tls
        hosts:
          - argocd.dziedzic.me
    https: true

## Argo CD Redis
redis:
  enabled: true

## Config files
configs:
  repositories:
    git-sample-app-infra:
      name: sample-app-infra
      type: git
      url: https://github.com/Retoxx-dev/sample-app-infra.git

  cm:
    url: https://argocd.dziedzic.me
    dex.config: |
      logger:
        level: debug
        format: json
      connectors:
      - type: saml
        id: RetoxxDevSaml
        name: Retoxx Dev
        config:
          entityIssuer: https://argocd.dziedzic.me/api/dex/callback
          ssoURL: https://login.microsoftonline.com/4d02d6f1-0a23-46e7-9e4b-67fe15ccc9d2/saml2
          caData: $retoxx-dev-sso-ca:retoxx-dev-sso-ca
          redirectURI: https://argocd.dziedzic.me/api/dex/callback
          usernameAttr: email
          emailAttr: email
          groupsAttr: Group

  rbac:
    policy.csv: |
      p, role:org-admin, applications, *, */*, allow
      p, role:org-admin, clusters, get, *, allow
      p, role:org-admin, repositories, get, *, allow
      p, role:org-admin, repositories, create, *, allow
      p, role:org-admin, repositories, update, *, allow
      p, role:org-admin, repositories, delete, *, allow
      g, "85a5a5b0-4df4-4705-884a-bb1743f6eead", role:org-admin # (azure group assigned to role)